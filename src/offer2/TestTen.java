package offer2;import java.util.Stack;/** * 包含min函数的栈 * * 借用辅助堆达到o1复杂度 */public class TestTen {    Stack<Integer> stack1 = new Stack<>();    //stack2存放min    Stack<Integer> stack2 = new Stack<>();    //入栈时，node < stack2顶元素，则入stack2,否则不入    public void push(int node) {        stack1.push(node);        if (stack2.isEmpty()) {            stack2.push(node);        } else {            if (node < stack2.peek()) {                stack2.push(node);            }        }    }    //同时弹出，若stack1.pop != stack2.pop,则stack2.pop重新入stack2    public void pop() {        int num1 = stack1.pop();        int num2 = stack2.pop();        if (num1 != num2) {            stack2.push(num2);        }    }    //获取stack1的值    public int top() {        int num = stack1.pop();        stack2.push(num);        return num;    }    public int min() {        int num = stack2.pop();        stack2.push(num);        return num;    }}