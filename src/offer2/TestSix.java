package offer2;/** * 合并两个排序链表 */public class TestSix {    public static void main(String[] args) {        ListNode node1 = new ListNode(1);        node1.next = new ListNode(2);        node1.next.next = new ListNode(4);        ListNode node2 = new ListNode(2);        node2.next = new ListNode(3);        node2.next.next = new ListNode(5);        Merge1(node1, node2);    }    //非递归    public static ListNode Merge(ListNode list1,ListNode list2) {        if (list1 == null && list2 == null) {            return null;        }        if (list1 == null) {            return list2;        }        if (list2 == null) {            return list1;        }        ListNode head;        ListNode temp1 = list1;        ListNode temp2 = list2;        if (list1.val <= list2.val) {            head = new ListNode(list1.val);            temp1 = temp1.next;        } else {            head = new ListNode(list2.val);            temp2 = temp2.next;        }        ListNode temp3 = head;        while (temp1 != null || temp2 != null) {            if (temp1 != null && temp2 != null) {                if (temp1.val <= temp2.val) {                    temp3.next = new ListNode(temp1.val);                    temp3 = temp3.next;                    temp1 = temp1.next;                } else {                    temp3.next = new ListNode(temp2.val);                    temp3 = temp3.next;                    temp2 = temp2.next;                }            } else if (temp1 == null && temp2 != null) {                temp3.next = new ListNode(temp2.val);                temp3 = temp3.next;                temp2 = temp2.next;            } else if (temp1 != null && temp2 == null) {                temp3.next = new ListNode(temp1.val);                temp3 = temp3.next;                temp1 = temp1.next;            }        }        return head;    }    //递归    public static ListNode Merge1(ListNode list1,ListNode list2) {        if (list1 == null) {            return list2;        }        if (list2 == null) {            return list1;        }        if (list1.val <= list2.val) {            list1.next = Merge1(list1.next, list2);            return list1;        } else {            list2.next = Merge1(list1, list2.next);            return list2;        }    }}