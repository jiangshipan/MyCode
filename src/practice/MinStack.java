package practice;import java.util.Stack;/** * 最小栈的实现 */public class MinStack {    private Stack<Integer> mainStack = new Stack<>();    private Stack<Integer> minStack = new Stack<>();    /**     * 入栈     * @param element     */    public void push(int element) {        mainStack.push(element);        //如果辅助栈为空或者新元素小于等于最小栈顶        if (minStack.empty() || element <= minStack.peek()) {            minStack.push(element);        }    }    /**     * 出栈     * @return     */    public Integer pop() {        //如果出栈元素和辅助站栈顶元素一样        if (mainStack.peek().equals(minStack.peek())) {            minStack.pop();        }        return mainStack.pop();    }    /**     * 获取栈中最小元素     * @return     * @throws Exception     */    public int getMin() throws Exception {        if (mainStack.isEmpty()) {            throw new Exception("stack is empty");        }        return minStack.peek();    }    public static void main(String[] args) throws Exception{        MinStack stack = new MinStack();        stack.push(4);        stack.push(9);        stack.push(7);        stack.push(3);        stack.push(8);        stack.push(5);        System.out.println(stack.getMin());        stack.pop();        stack.pop();        stack.pop();        System.out.println(stack.getMin());    }}