package practice;/** * 判断链表有环: * 双指针法 */public class NodeIsCycle {    /**     * 得到入环点: 第一次相遇后 把p1放回头节点. p1,p2都一次走一步     * @param head     * @return     */    public static Node getCycleHead(Node head) {        Node p1 = head;        Node p2 = head;        while (p2 != null && p2.next != null) {            p1 = p1.next;            p2 = p2.next.next;            if (p1 == p2) {                p1 = head;                break;            }        }        while (p2 != null) {            p1 = p1.next;            p2 = p2.next;            if (p1 == p2) {                return p1;            }        }        return null;    }    /**     * 求环的长度: 第一次相遇后直到第二次相遇 p1走的路数就是环长度     * @param head     * @return     */    public static int getCycleLength(Node head) {        Node p1 = head;        Node p2 = head;        int length = 0;        //是否相遇        boolean isMeet = false;        while (p2 != null && p2.next != null) {            p1 = p1.next;            p2 = p2.next.next;            if (isMeet) {                length++;                if (p1 == p2) {                    return length;                }            }            if (p1 == p2) {                isMeet = true;            }        }        return 0;    }    /**     * 判断链表是否有环     * @param head     * @return     */    public static boolean isCycle(Node head) {        Node p1 = head;        Node p2 = head;        while (p2 != null && p2.next != null) {            p1 = p1.next;            p2 = p2.next.next;            if (p1 == p2) {                return true;            }        }        return false;    }    private static class Node {        int data;        Node next;        Node (int data) {            this.data = data;        }    }    public static void main(String[] args) {        Node node1 = new Node(5);        Node node2 = new Node(3);        Node node3 = new Node(7);        Node node4 = new Node(2);        Node node5 = new Node(6);        node1.next = node2;        node2.next = node3;        node3.next = node4;        node4.next = node5;        node5.next = node2;        System.out.println(isCycle(node1));        System.out.println(getCycleLength(node1));        System.out.println(getCycleHead(node1).data);    }}