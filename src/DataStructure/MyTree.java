package DataStructure;import java.util.Arrays;import java.util.LinkedList;import java.util.Queue;import java.util.Stack;public class MyTree {    public static TreeNode createBinaryTree(LinkedList<Integer> inputList) {        TreeNode node = null;        if (inputList == null || inputList.isEmpty()) {            return null;        }        Integer data = inputList.removeFirst();        if (data != null) {            node = new TreeNode(data);            node.left = createBinaryTree(inputList);            node.right = createBinaryTree(inputList);        }        return node;    }    /**     * 先序列遍历(递归)     * @param node     */    public static void preOrderTraveral(TreeNode node) {        if (node == null) {            return;        }        System.out.print(node.data + " ");        preOrderTraveral(node.left);        preOrderTraveral(node.right);    }    /**     * 先序递归非递归     * @param root     */    public static void preOrderTraveralWithStack(TreeNode root) {        Stack<TreeNode> stack = new Stack<>();        TreeNode treeNode = root;        while (treeNode != null || !stack.isEmpty()) {            //迭代访问节点左孩子，并入栈            while (treeNode != null) {                System.out.print(treeNode.data + " ");                stack.push(treeNode);                treeNode = treeNode.left;            }            //如果节点没有左孩子，则弹出栈顶节点, 访问节点右孩子            if (!stack.isEmpty()) {                treeNode = stack.pop();                treeNode = treeNode.right;            }        }    }    /**     * 中序遍历 非递归     * @param root     */    public static void inOrderTraveralWithStack(TreeNode root) {        Stack<TreeNode> stack = new Stack<>();        TreeNode treeNode = root;        while (treeNode != null || !stack.isEmpty()) {            if (treeNode != null) {                stack.push(treeNode);                treeNode = treeNode.left;            } else  {                treeNode = stack.pop();                System.out.print(treeNode.data + " ");                treeNode = treeNode.right;            }        }    }    /**     * 二叉树中序遍历(递归)     * @param node     */    public static void inOrderTraveral(TreeNode node) {        if (node == null) {            return;        }        inOrderTraveral(node.left);        System.out.print(node.data + " ");        inOrderTraveral(node.right);    }    /**     * 后序遍历(递归)     * @param node     */    public static void postOrderTraveral(TreeNode node) {        if (node == null) {            return;        }        postOrderTraveral(node.left);        postOrderTraveral(node.right);        System.out.print(node.data + " ");    }    /**     * 后序非递归     * @param root     */    public static void postOrderTraveralWithStak(TreeNode root) {        Stack<TreeNode> stack1 = new Stack<>();        Stack<TreeNode> stack2 = new Stack<>();        TreeNode treeNode = root;        stack1.push(treeNode);        while (!stack1.isEmpty()) {            treeNode = stack1.pop();            stack2.push(treeNode);            if (treeNode.left != null) {                stack1.push(treeNode.left);            }            if (treeNode.right != null) {                stack1.push(treeNode.right);            }        }        while (!stack2.isEmpty()) {            System.out.print(stack2.pop().data + " ");        }    }    /**     * 层序遍历     * @param root     */    public static void levelOrderTraversal(TreeNode root) {        Queue<TreeNode> queue = new LinkedList<TreeNode>();        queue.offer(root);        while (!queue.isEmpty()) {            TreeNode node = queue.poll();            System.out.print(node.data + " ");            if (node.left != null) {                queue.offer(node.left);            }            if (node.right != null) {                queue.offer(node.right);            }        }    }    private static class TreeNode {        int data;        TreeNode left;        TreeNode right;        TreeNode(int data) {            this.data = data;        }    }    public static void main(String[] args) {        LinkedList<Integer> inputList = new LinkedList<>(Arrays.asList(new Integer[]{3, 2, 9, null, null, 10, null, null, 8, null, 4}));        TreeNode treeNode = createBinaryTree(inputList);        System.out.println("先序遍历: ");        preOrderTraveral(treeNode);        System.out.println();        System.out.println("中序遍历: ");        inOrderTraveral(treeNode);        System.out.println();        System.out.println("后序遍历: ");        postOrderTraveral(treeNode);        System.out.println();        System.out.println("层序遍历: ");        levelOrderTraversal(treeNode);        System.out.println();        System.out.println("先序非递归: ");        preOrderTraveralWithStack(treeNode);        System.out.println();        System.out.println("中序非递归: ");        inOrderTraveralWithStack(treeNode);        System.out.println();        System.out.println("后序非递归: ");        postOrderTraveralWithStak(treeNode);    }}