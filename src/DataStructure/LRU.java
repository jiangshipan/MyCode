package DataStructure;import java.util.HashMap;/** * 缓存LRU实现 * 使查找节点复杂度位O(1),使用hashmap实现 */public class LRU<K, V> {    private Node head;    private Node tail;    private HashMap<K, Node> map;    private int maxSize;    private class Node {        Node pre;        Node next;        K k;        V v;        public Node(K k, V v) {            this.k = k;            this.v = v;        }    }    public LRU(int maxSize) {        this.maxSize = maxSize;        this.map = new HashMap<>(maxSize * 4 / 3);        head = new Node(null, null);        tail = new Node(null, null);        head.next = tail;        tail.pre = head;    }    /**     * 得到节点     * @param key     * @return     */    public V get(K key) {        if (!map.containsKey(key)) {            return null;        }        Node node = map.get(key);        unlink(node);        appendHead(node);        return node.v;    }    /**     * 添加节点     * @param key     * @param value     */    public void put(K key, V value) {        if (map.containsKey(key)) {            Node node = map.get(key);            unlink(node);        }        Node node = new Node(key, value);        map.put(key, node);        appendHead(node);        if (map.size() > maxSize) {            Node removeNode = removeTail();            //todo 移除key            map.remove(removeNode);        }    }    /**     * 删除节点     * @param node     */    private void unlink(Node node) {        Node pre = node.pre;        Node next = node.next;        pre.next = next;        next.pre = pre;        node.pre = null;        node.next = null;    }    /**     * 头部添加节点     * @param node     */    private void appendHead(Node node) {        Node next = head.next;        node.next = next;        next.pre = node;        node.pre = head;        head.next = node;    }    /**     * 获取要删除的尾节点     * @return     */    private Node removeTail() {        Node node = tail.pre;        Node pre = node.pre;        tail.pre = pre;        pre.next = tail;        node.pre = null;        node.next = null;        return node;    }}