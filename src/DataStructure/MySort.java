package DataStructure;import java.util.Arrays;public class MySort {    /**     * 基础冒泡排序     * @param array     */    public static void sort1(int[] array) {        for (int i = 0; i < array.length - 1; i++) {            for (int j = 0; j < array.length - i - 1; j++) {                int temp;                if (array[j] > array[j + 1]) {                    temp = array[j];                    array[j] = array[j + 1];                    array[j + 1] = temp;                }            }        }    }    /**     * 冒泡排序优化     * @param array     */    public static void sort2(int[] array) {        for (int i = 0; i < array.length - 1; i++) {            boolean isSorted = true;            for (int j = 0; j < array.length - i - 1; j++) {                int temp;                if (array[j] > array[j + 1]) {                    temp = array[j];                    array[j] = array[j + 1];                    array[j + 1] = temp;                    isSorted = false;                }            }            if (isSorted) {                break;            }        }    }    /**     * 冒泡有序数组优化     * @param array     */    public static void sort3(int[] array) {        for (int i = 0; i < array.length - 1; i++) {            //有序标记，每一轮初始值为true            boolean isSorted = true;            //无序十足的边界，每次比较只需要比较到这里为止            int sortBorder = array.length - 1;            int newSortBorder = 0;            for (int j = 0; j < sortBorder; j++) {                int temp;                if (array[j] > array[j + 1]) {                    temp = array[j];                    array[j] = array[j + 1];                    array[j + 1] = temp;                    isSorted = false;                    //把无序数列的边界更新为最后一次交换元素的位置                    newSortBorder = j;                }            }            sortBorder = newSortBorder;            if (isSorted) {                break;            }        }    }    /**     * 鸡尾酒排序     * @param array     */    public static void sort4(int[] array) {        int temp ;        for (int i = 0; i < array.length / 2; i ++) {            //有序标记            boolean isSorted = true;            //奇数轮，从左向右比较和交换            for (int j = i; j < array.length - i - 1; j++) {                if (array[j] > array[j + 1]) {                    temp = array[j];                    array[j] = array[j + 1];                    array[j + 1] = temp;                    isSorted = false;                }            }            if (isSorted) {                break;            }            //偶数轮之前 将isSorted标记为true            isSorted = true;            //偶数轮，从右向左比较和交换            for (int j = array.length - i - 1; j > i; j --) {                if (array[j] < array[j - 1]) {                    temp = array[j];                    array[j] = array[j - 1];                    array[j - 1] = temp;                    isSorted = false;                }            }            if (isSorted) {                break;            }        }    }    public static void main(String[] args) {        int[] array = new int[]{3,4,2,1,5,7,6,8};        sort3(array);        System.out.println(Arrays.toString(array));    }}