package DataStructure;/** * 链表增删改查 */public class MyNode {    //头节点指针    private Node head;    //尾节点指针  方便尾插    private Node last;    //链表实际长度    private int size;    /**     * 链表插入元素     * @param data 插入元素     * @param index 插入位置     */    public void insert(int data, int index) {        if (index < 0 || index > size) {            throw new IndexOutOfBoundsException("超出链表节点范围");        }        Node insertNode = new Node(data);        if (size == 0) {            //空链表            head = insertNode;            last = insertNode;        } else if (index == 0) {            insertNode.next = head;            head = insertNode;        } else if (size == index) {            //尾部插入            last.next = insertNode;            last = insertNode;        } else {            //插入中间            Node prevNode = get(index - 1);            Node nextNode = prevNode.next;            prevNode.next = insertNode;            insertNode.next = nextNode;        }        size++;    }    public void remove(int index) {        if (index < 0 || index >= size) {            throw new IndexOutOfBoundsException("超出链表节点范围");        }        if (index == 0) {            //删除头节点            head = head.next;        } else if (index == size - 1) {            //删除尾节点            Node prevNode = get(index - 1);            prevNode.next = null;            last = prevNode;        } else {            //删除中间节点            Node prevNode = get(index - 1);            Node nextNode = prevNode.next.next;            prevNode.next = nextNode;        }        size--;    }    /**     * 链表查找元素     * @param index 查找的位置     * @return     */    public Node get(int index) {        if (index < 0 || index >= size) {            throw new IndexOutOfBoundsException("超出链表节点范围");        }        Node temp = head;        for (int i = 0; i < index; i++) {            temp = temp.next;        }        return temp;    }    public void output() {        Node temp = head;        while (temp != null) {            System.out.print(temp.data + " ");            temp = temp.next;        }        System.out.println();    }    private static class Node {        int data;        Node next;        Node(int data) {            this.data = data;        }    }    public static void main(String[] args) {        MyNode node = new MyNode();        node.insert(1, 0);        node.insert(2, 1);        node.insert(3, 2);        node.insert(4, 3);        node.insert(5, 4);        node.output();        node.insert(6,3);        node.output();        node.remove(3);        node.output();        System.out.println(node.get(3).data);    }}