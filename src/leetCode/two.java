package leetCode;import java.util.List;import java.util.Stack;public class two {    public static void main(String[] args) {        ListNode l1 = new ListNode(1);        l1.next = new ListNode(8);        ListNode l2 = new ListNode(0);        ListNode l3 = addTwoNumbers(l1, l2);        for (int i = 0; i < 5 && l3 != null; i++) {            System.out.println(l3.val);            l3 = l3.next;        }    }    public static ListNode addTwoNumbers(ListNode l1, ListNode l2) {        if (l1 == null && l2 == null) {            return null;        }        if (l1 == null) {            return l2;        }        if (l2 == null) {            return l1;        }        Stack<Integer> stack = new Stack<>();        Stack<ListNode> stack1 = new Stack<>();        while (l1 != null || l2 != null) {            int x;            if (l1 == null) {                x = l2.val;            } else if (l2 == null) {                x = l1.val;            } else {                x = l1.val + l2.val;            }            int y = x / 10;            if (y > 0) {                stack.push(x - 10 * y);                if (l1.next != null) {                    l1.next.val = l1.next.val + y;                } else {                    l1.next = new ListNode(y);                }            } else {                stack.push(x);            }            if (l1 == null) {                l2 = l2.next;            } else if (l2 == null) {                l1 = l1.next;            } else {                l1 = l1.next;                l2 = l2.next;            }        }        ListNode l3 = new ListNode(stack.pop());        ListNode temp = l3;        while (!stack.isEmpty()) {            temp.next = new ListNode(stack.pop());            temp = temp.next;        }        while (l3 != null) {            stack1.push(l3);            l3 = l3.next;        }        l3 = stack1.pop();        temp = l3;        while (!stack1.isEmpty()) {            temp.next = new ListNode(stack1.pop().val);            temp = temp.next;        }        return l3;    }    static class ListNode {        int val;        ListNode next;        ListNode(int x) { val = x; }    }}